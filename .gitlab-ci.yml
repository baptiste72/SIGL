---
stages:
  - lint
  - build
  - test
  - deploy

variables:
  REGISTRY: "${CI_REGISTRY}/${CI_PROJECT_ROOT_NAMESPACE}/${CI_PROJECT_NAME}"

.install-node-modules: &install-node-modules
  image:
    name: "${REGISTRY}/dev-angular"
    entrypoint: [""]
  before_script:
    - cd frontend
    - npm install
  cache:
    key: node_modules
    paths:
      - frontend/node_modules/
  tags:
    - angular

lint-angular:
  stage: lint
  <<: *install-node-modules
  script:
    - ng lint

lint-django:
  stage: lint
  image:
    name: "${REGISTRY}/dev-django"
    entrypoint: [""]
  before_script:
    - cd backend
  script:
    - pylint --load-plugins pylint_django *

build-angular:
  stage: build
  needs: ["lint-angular"]
  <<: *install-node-modules
  script:
    - ng build

test-angular:
  stage: test
  needs: ["build-angular"]
  <<: *install-node-modules
  script:
    - ng test --watch=false
  coverage: '/All files[^|]*\|[^|]*\s+([\d\.]+)/'
  artifacts:
    when: always
    reports:
      junit:
        - frontend/test/junit.xml
      coverage_report:
        coverage_format: cobertura
        path: frontend/coverage/frontend/cobertura-coverage.xml
  allow_failure: true

deploy-to-prod:
  stage: deploy
  image: debian:bullseye-slim
  before_script:
    - 'command -v ssh-agent > /dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval "$(ssh-agent -s)"
    - echo "${SSH_PRIVATE_KEY}" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "${SSH_SERVER_HOST}" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh -p 2222 sigl@projet-sigl.fr 'source .zshrc
        && rm -rf sigl
        && git clone git@gitlab.com:baptiste72/sigl.git
        && cd sigl/docker/prod
        && echo -e "DJANGO_DB=${DJANGO_DB}\n
                    DJANGO_USER=${DJANGO_USER}\n
                    DJANGO_PASSWORD=${DJANGO_PASSWORD}\n
                    SONAR_DB=${SONAR_DB}\n
                    SONAR_USER=${SONAR_USER}\n
                    SONAR_PASSWORD=${SONAR_PASSWORD}" > .env
        && docker compose down
        && docker system prune -af
        && docker volume prune -f
        && docker compose up -d
        && docker exec django python manage.py makemigrations
        && docker exec django python manage.py migrate'
  environment: production
  only:
    - master
